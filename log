import logging
import traceback
import sys

# Configure logging once for all uses with updated format to include extra data
def configure_logging():
    extra_format = '%(asctime)s - %(levelname)s - %(name)s - %(message)s'
    # Placeholder for potential extra data
    extra_data_placeholder = ' %(extra_data)s'
    logging.basicConfig(level=logging.ERROR, format=extra_format + extra_data_placeholder)

# Improved and unified log_error function with fixed extra_data logging
def log_error(error, message='An error occurred', extra_data=None, detailed_traceback=False):
    """
    Logs detailed error information with customizable detail level and extra data.
    """
    logger = logging.getLogger(__name__)
    
    if detailed_traceback:
        tb_str = traceback.format_exception(etype=type(error), value=error, tb=error.__traceback__)
        tb_str = "".join(tb_str)
        log_message = f"{message}. Error: {error}. Traceback: {tb_str}"
    else:
        log_message = f"{message}. Error: {str(error)}"

    # Prepare the 'extra' parameter to include both predefined and dynamic extra data
    extra = {'extra_data': ''}
    if extra_data:
        # Convert extra_data dict to a string and append to the log message using 'extra'
        extra['extra_data'] = ', '.join(f"{key}={value}" for key, value in extra_data.items())

    # Use the extra parameter for logging additional context
    logger.error(log_message, extra=extra)

# Configure logging with the new format
configure_logging()

# Example usage
#try:
#    raise ValueError("Example error for demonstration.")
#except Exception as e:
#    log_error(e, "Unexpected error occurred", {"user": "exampleUser", "action": "exampleAction"}, detailed_traceback=True)
