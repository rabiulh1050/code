import logging
import sys

# Logger configuration module
def configure_logging():
    logger = logging.getLogger(__name__)
    if not logger.hasHandlers():
        logging.basicConfig(level=logging.ERROR, format='%(asctime)s - %(levelname)s - %(name)s - %(message)s')
    return logger

# Centralized logger instance for the module
logger = configure_logging()

def log_error(error: Exception, message: str = 'An error occurred', extra_data: dict = None, detailed_traceback: bool = False):
    """
    Logs detailed error information with customizable detail level and extra data.
    """
    log_message = f"{message}. Error: {str(error)}"
    if detailed_traceback:
        log_message += f". Traceback: {''.join(traceback.format_exception(None, error, error.__traceback__))}"

    if extra_data:
        logger.error(log_message, extra={'extra_data': extra_data})
    else:
        logger.error(log_message, exc_info=detailed_traceback)

def log_success(operation: str, input_data: dict = None, output_data: dict = None, additional_info: dict = None):
    """
    Logs successful execution of an operation, including input and output data validation details.
    """
    parts = [f"Successful execution of {operation}"]
    if input_data is not None:
        parts.append(f"Input data: {input_data}")
    if output_data is not None:
        parts.append(f"Output data: {output_data}")
    if additional_info is not None:
        parts.append(f"Additional info: {additional_info}")
    logger.info(" | ".join(parts))

# Usage example
def example_operation(input_value: int) -> int:
    output_value = input_value * 2
    is_valid_input = input_value > 0
    is_valid_output = output_value > 0
    if is_valid_input and is_valid_output:
        log_success("example_operation", input_data={"input_value": input_value}, output_data={"output_value": output_value}, additional_info={"validation": "passed"})
    return output_value

example_input = 5
example_operation(example_input)




WITH FINS_LFC AS (
    SELECT md_data_enum_lkup_obj_id
    FROM ${RS_IDS_SCHEMA_NM}.MD_DATA_ENUM_LKUP
    WHERE DATA_ENUM_ATTR_NM = 'FINS_LFC_TI'
    AND DATA_ENUM_TP = 'AtClosing'
),
LN_CACHE AS (
    SELECT LN_LN.FNM_LN_ID, NVL(LN_LN.AQSN_DT, LN_STC.NOTE_DT) AS LN_CUTOFF_DT
    FROM ${RS_IDS_SCHEMA_NM}.LN_LN
    LEFT JOIN ${RS_IDS_SCHEMA_NM}.LN_STC ON LN_LN.FNM_LN_ID = LN_STC.FNM_LN_ID
    JOIN FINS_LFC ON LN_STC.fins_lfc_ti = FINS_LFC.md_data_enum_lkup_obj_id
    WHERE LN_LN.MD_SRC_SYS_LKUP_OBJ_ID = 9999 AND LN_STC.MD_SRC_SYS_LKUP_OBJ_ID = 9999
),
LN_UWRG AS (
    SELECT UWRG.FNM_LN_ID, UWRG.AUTOD_UWRG_SYS_TI, COALESCE(drvd.FNM_LN_ID, UWRG.FNM_LN_ID) AS FNM_LN_IDD, 
           TRIM(UWRG.AUTOD_UWRG_CASE_ID) AS AUTOD_UWRG_CASE_ID, UWRG.MD_SRC_SYS_LKUP_OBJ_ID
    FROM ${RS_IDS_SCHEMA_NM}.LN_UWRG UWRG
    LEFT JOIN ${RS_UCD_CIN_CARE_SCHEMA_NM}.ln_appl_du_drvd drvd ON UWRG.AUTOD_UWRG_CASE_ID = drvd.FNM_CFILE_ID
    WHERE UWRG.MD_SRC_SYS_LKUP_OBJ_ID = 9999
),
VALID_LN AS (
    SELECT FNM_LN_ID FROM (
        SELECT FNM_LN_ID, row_number() OVER (PARTITION BY FNM_LN_ID ORDER BY FNM_LN_ID) AS rec_FNM_LN_ID
        FROM ${RS_CONV_TGT_DIM_SCHEMA_NM}.LQCS_UCD_VND_SPST
    ) WHERE rec_FNM_LN_ID = 1
)
SELECT LN_UWRG.FNM_LN_ID, LN_UWRG.AUTOD_UWRG_CASE_ID, LN_UWRG.AUTOD_UWRG_SYS_TI, 
       MD_DATA_ENUM_LKUP.DATA_ENUM_TP, LN_UCD_LTST_SPST.TRAN_DIM_ID, LN_CACHE.LN_CUTOFF_DT
FROM LN_UWRG
JOIN ${RS_IDS_SCHEMA_NM}.MD_DATA_ENUM_LKUP ON LN_UWRG.AUTOD_UWRG_SYS_TI = MD_DATA_ENUM_LKUP.MD_DATA_ENUM_LKUP_OBJ_ID
                                             AND LN_UWRG.MD_SRC_SYS_LKUP_OBJ_ID = 9999
JOIN LN_UCD_LTST_SPST ON LN_UWRG.AUTOD_UWRG_CASE_ID = LN_UCD_LTST_SPST.FNM_CFILE_ID
LEFT JOIN LN_CACHE ON LN_CACHE.FNM_LN_ID = LN_UWRG.FNM_LN_ID
LEFT JOIN VALID_LN ON LN_UWRG.FNM_LN_ID = VALID_LN.FNM_LN_ID
WHERE VALID_LN.FNM_LN_ID IS NULL;

